// Description: Raster renderer over the OSM
// Raster loaded as a map marker

// Copyright (c) 2015 - 2016
// Tomas Bayer
// Charles University in Prague, Faculty of Science
// bayertom@natur.cuni.cz

// This library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library. If not, see <http://www.gnu.org/licenses/>.

package detectprojv2j.forms;

import static com.sun.org.apache.xalan.internal.lib.ExsltMath.power;
import java.awt.AlphaComposite;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import static java.lang.Math.PI;
import static java.lang.Math.log;
import static java.lang.Math.pow;
import static java.lang.Math.sqrt;
import static java.lang.Math.tan;

import org.openstreetmap.gui.jmapviewer.Coordinate;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MapMarkerCircle;
import org.openstreetmap.gui.jmapviewer.interfaces.ICoordinate;
import org.openstreetmap.gui.jmapviewer.interfaces.MapMarker;

public class RasterRenderer extends MapMarkerCircle implements MapMarker {
    private Coordinate sw;
    private Coordinate ne;
    private BufferedImage img;
    private double [] scale;
    private float [] alpha;
    private AffineTransform at;                                             //Affine transformation object
    JMapViewer map;

    public RasterRenderer(final Coordinate sw_, final Coordinate ne_, final BufferedImage img_, double [] scale_, float [] alpha_, JMapViewer map_) {
        this(sw_, ne_, 1, img_, scale_, alpha_, map_);
    }

    public RasterRenderer(final Coordinate sw_, final Coordinate ne_, final double radius, final BufferedImage img_,double [] scale_, float [] alpha_, JMapViewer map_) {
        super(sw_, radius);
        sw = sw_;
        ne =ne_;
        img = img_;
        alpha = alpha_;
        scale = scale_;
        map = map_;

        //Create new affine transformation and set its parameters
        at = new AffineTransform();
        at.translate(0, 0);
        at.scale(1, 1);
    }

    @Override
    public void paint(Graphics g, Point position, int sc) 
    {
        super.paint(g, position, sc);
              
        //Get visible rectangle
        Rectangle r = map.getVisibleRect();
        
        final int x1r = r.x;
        final int y1r = r.y + (int)(0.5 * r.height);
        final int x2r = r.x + r.width;
        final int y2r = y1r;
                
        //Get geographic coordinates of rectangle points
        final ICoordinate v1r = map.getPosition(x1r, y1r);
        final ICoordinate v2r = map.getPosition(x2r, y2r);
        final double lon1r = v1r.getLon();
        final double lon2r = v2r.getLon();

        //Compute map scale: s = dx / dX as a fraction of the horizontal
        //edge of the visible rectangle and its image in Mercator projection
        final double R_km = 6378.137;
        final double dXr = x2r - x1r;
        final double dxr = (lon2r - lon1r) * R_km * PI/180;
        final double scale = dxr / dXr;
        
        //Get coordinates of the vertices of the raster bounding box
        final double lat_sw = sw.getLat();
        final double lon_sw = sw.getLon();
        final double lat_ne = ne.getLat();
        final double lon_ne = ne.getLon();
        
        //Compute their coordinates in the Mercator projection
        final double x_sw = R_km * lon_sw * PI / 180;
        final double y_sw = R_km * log(tan(0.5 * lat_sw * PI / 180 + PI / 4 ));
        final double x_ne = R_km * lon_ne * PI / 180;
        final double y_ne = R_km * log(tan(0.5 * lat_ne * PI / 180 + PI / 4 ));
        
        //Compute distance in the Mercator projection
        final double dx = x_ne - x_sw;
        final double dy = y_ne - y_sw;
        final double d = sqrt(dx * dx + dy * dy);
        
        //Compute distance in the raster
        final double w = img.getWidth();
        final double h = img.getHeight();
        final double dr = sqrt(w * w + h * h);
        
        //Compute multiplication ratio mr = d / ( dr * scale )
        final double mr = d / (dr * scale);
        
        /*
        
        
        //Get diagonal of the bounding box
        final double dlat = ne.getLat() - sw.getLat();
        final double dlon = ne.getLon() - sw.getLon();
        final double diag_bb = sqrt(dlat * dlat + dlon * dlon);
        final double diag_bb_e = sqrt(150 * 150 + 360 * 360);
        
        //Get diagonal of the raster in pixels
        final double diag_ras = sqrt(img.getWidth() * img.getWidth() + img.getHeight() * img.getHeight());
        final double diag_ras_e = sqrt(832 * 832 + 540 * 540);
        
        //Recompute ratio according to the raster diagonal
        final double ratio_e = 48.250;
        double ratio = ratio_e * diag_ras_e / diag_ras;
        
        //Recompute ratio according to the extent
        ratio = ratio * diag_bb / diag_bb_e; 
        
        //Compute new dimension of the raster
        //final int ww = (int)(img.getWidth()  * ratio / scale);
        //final int hh = (int)(img.getHeight() * ratio / scale);
        */
        
        //Compute new dimensions of the raster (resize it)
        final int wres = (int)(img.getWidth()  * mr);
        final int hres = (int)(img.getHeight() * mr);
        
        System.out.println(scale);
        
        //Render raster over the map
        Graphics2D g2d = (Graphics2D) g;
        
        //Set transparency for a raster       
        AlphaComposite ac = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, alpha[0]);
        g2d.setComposite(ac);

        //g2d.drawImage(img, position.x - w/2 , position.y - h/2, (int)(w * 1), (int)(h*1), null);
        g2d.drawImage(img, position.x, position.y - hres, wres, hres, null);
        
        //Set shifts and scale to the affine transformation: concatenate 2 transformations
        //at = AffineTransform.getTranslateInstance(position.x, position.y);
        //at.concatenate(AffineTransform.getScaleInstance(40.000/scale, 40.000/scale));
                                
        //Draw early map image to the transformed graphic object
        //g2d.drawImage(img, at, null);
        
    }
}
